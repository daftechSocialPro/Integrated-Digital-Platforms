import { Component, Input, OnInit, ViewChild } from '@angular/core';

import { CommonModule } from '@angular/common';
import { ActivatedRoute, ActivatedRouteSnapshot, Router, RouterModule } from '@angular/router';
import { ReactiveFormsModule } from '@angular/forms';

import { InputMaskModule } from 'primeng/inputmask';
import { PaymentService } from 'src/app/services/payment.service';
import { MessageService } from 'primeng/api';
import { environment } from 'src/environments/environment';
import { MemberService } from 'src/app/services/member.service';
import { IMembersGetDto, MoodleUpdateDto } from 'src/models/auth/membersDto';
import { v4 as uuidv4 } from 'uuid';
import { CommonService } from 'src/app/services/common.service';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';

import { PyamentDetilModalComponent } from './pyament-detil-modal/pyament-detil-modal.component';

@Component({
  selector: 'app-payment-verfication',
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule, InputMaskModule],
  templateUrl: './payment-verfication.component.html',
  styleUrls: ['./payment-verfication.component.scss']
})
export default class PaymentVerficationComponent implements OnInit {
  txt_rn: string;
  baseUrl = environment.clienUrl;
  autoGeneratedId: string;
  selectedMember!: IMembersGetDto;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private paymentService: PaymentService,
    private commonService: CommonService,
    private memberService: MemberService,
    private messageService: MessageService,
    private modalService: NgbModal
  ) {}

  ngOnInit(): void {
    const snapshot: ActivatedRouteSnapshot = this.route.snapshot;
    this.txt_rn = snapshot.paramMap.get('txt_rn');

    this.verifyPayment();
    this.autoGeneratedId = uuidv4();
  }

  verifyPayment() {
    this.paymentService.verifyPayment(this.txt_rn).subscribe({
      next: (res) => {
        if (res.response) {
          if (res.response.data.status == 'success') {
            this.MakePaymentConfirmation();
          } else {
            this.messageService.add({ severity: 'error', summary: 'Something went Wrong', detail: res.response.data.status });
          }
        } else {
          this.messageService.add({ severity: 'error', summary: 'Something went Wrong', detail: res.message });
        }
      },
      error: (err) => {
        this.messageService.add({ severity: 'success', summary: 'Successfull', detail: err });
      }
    });
  }

  MakePaymentConfirmation() {
    this.paymentService.MakePaymentConfirmation(this.txt_rn).subscribe({
      next: (res) => {
        this.messageService.add({ severity: 'success', summary: 'Successfull', detail: 'Your Payment was successfull' });
        this.calllMoodle(res.data);
      }
    });
  }

  calllMoodle(member: IMembersGetDto) {
    this.selectedMember = member;
    console.log(this.selectedMember)
    const formData = new FormData();
    const password = this.commonService.generatePassword(10);

    const userName = member.fullName.split(' ')[0].toLowerCase() + '_' + this.commonService.generatePassword(5).toLowerCase();

    formData.append('moodlewsrestformat', 'json');
    formData.append('wsfunction', 'core_user_create_users');
    formData.append('wstoken', 'a0c0c7896b48813246e45971eaa74c21');
    formData.append('users[0][username]', userName);
    formData.append('users[0][password]', password);
    formData.append('users[0][firstname]', member.fullName.split(' ')[0]);
    formData.append('users[0][lastname]', member.fullName.split(' ')[1]);
    formData.append('users[0][email]', member.email);
    formData.append('users[0][idnumber]', this.autoGeneratedId);
    formData.append('users[0][lang]', 'en');
    formData.append('users[0][description]', 'If you die you die');

    if (member.moodleId == null) {
      this.memberService.callMoodle(formData).subscribe({
        next: (res) => {
          this.messageService.add({ severity: 'success', summary: 'Successfull', detail: 'Your moodle Registration was successfull' });

          if (res[0]) {
            var moodleDto: MoodleUpdateDto = {
              moodleName: res[0].username,
              moodleId: res[0].id.toString(),
              memberId: member.id,
              moodlePassword: password
            };
            this.updateMember(moodleDto);
          } else {
            this.messageService.add({ severity: 'error', summary: res.debuginfo, detail: res.message });
          
            this.openModal(); //  window.location.href = this.baseUrl;
          }
        }
      });
    } else {
      this.memberService.updateMoodleStatus(member.id, '0').subscribe({
        next: (res) => {
          if (res.success) {
            this.messageService.add({ severity: 'success', summary: 'Successfull', detail: res.message });
            this.openModal(); // window.location.href = this.baseUrl;
          } else {
            this.messageService.add({ severity: 'error', summary: 'Something went wrong !!!', detail: res.message });

            this.openModal(); // window.location.href = this.baseUrl;
          }
        },
        error: (err) => {
          this.messageService.add({ severity: 'error', summary: 'Something went wrong', detail: err.message });

          this.openModal(); // window.location.href = this.baseUrl;
        }
      });
    }
  }

  updateMember(updateMoodleDto: MoodleUpdateDto) {
    this.memberService.updateMoodleApi(updateMoodleDto).subscribe({
      next: (res) => {
        if (res.success) {
          this.messageService.add({ severity: 'success', summary: 'Successfull', detail: 'Your moodle updated was successfull' });
       
          this.openModal(); 
        } else {
          this.messageService.add({ severity: 'error', summary: 'Something went Wrong!!!', detail: res.message });
        
          this.openModal(); //  window.location.href = this.baseUrl;
        }
      },
      error: (err) => {
        this.messageService.add({ severity: 'error', summary: 'Something went wrong!!', detail: err });
       
        this.openModal(); // window.location.href = this.baseUrl;
      }
    });
  }

  openModal() {
    let modalRef = this.modalService.open(PyamentDetilModalComponent, { size: 'lg' });

    modalRef.componentInstance.fullName = this.selectedMember.fullName;
    modalRef.componentInstance.membershipId = this.selectedMember.memberId;
    modalRef.componentInstance.membershipType = this.selectedMember.membershipType?.name;

    modalRef.result.then(() => {
      window.location.href = this.baseUrl;
    });
  }
}
