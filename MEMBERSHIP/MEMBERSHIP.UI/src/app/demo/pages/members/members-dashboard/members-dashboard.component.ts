import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { MessageService } from 'primeng/api';
import { MemberService } from 'src/app/services/member.service';
import { UserService } from 'src/app/services/user.service';
import { IMembersGetDto, MoodleUpdateDto } from 'src/models/auth/membersDto';
import { UserView } from 'src/models/auth/userDto';
import { GenerateIdCardComponent } from '../generate-id-card/generate-id-card.component';
import * as html2pdf from 'html2pdf.js';
import { CommonService } from 'src/app/services/common.service';
import { v4 as uuidv4 } from 'uuid';

@Component({
  selector: 'app-members-dashboard',

  templateUrl: './members-dashboard.component.html',
  styleUrls: ['./members-dashboard.component.scss']
})
export class MembersDashboardComponent implements OnInit {

  member: IMembersGetDto
  user: UserView
  viewId = false
  daysLeft = 0
  viewPassword = false
  password:string
  ngOnInit(): void {
    this.user = this.userService.getCurrentUser()
    this.getMembers()
    
  }

  constructor(
    private userService: UserService,
    private messageService: MessageService,
    private modalService: NgbModal,
    private commonService: CommonService,
    private memberService: MemberService
  ) { }

  async getMembers() {

    this.memberService.getSingleMember(this.user.loginId).subscribe({
      next: (res) => {

        this.member = res
     
        this.getDaysLeft(res.expiredDate)
       
    

      }
    })
  }

  generateIdCard(viewId) {
    this.viewId = !viewId
  }

  requestIdCard() {

    this.memberService.changeIdCardStatus(this.member&&this.member.id, 'REQUESTED', '').subscribe({
      next: (res) => {

        if (res.success) {
          this.messageService.add({ severity: 'success', summary: 'Successfull', detail: res.message });
          this.getMembers()
        } else {
          this.messageService.add({ severity: 'error', summary: 'Something went wrong!!!.', detail: res.message });
        }
      },
      error: (err) => {
        this.messageService.add({ severity: 'error', summary: 'Something went wrong!!!', detail: err.message });

      }
    })
  }

  getDaysLeft(expiredDate: Date) {
    const expirationDate = new Date(expiredDate); // Replace with your actual expiration date

    // Calculate the number of milliseconds between today and the expiration date
    const timeDiff = expirationDate.getTime() - Date.now();

    // Convert milliseconds to days
    const daysLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

    this.daysLeft = daysLeft

   
  }
  generatePdf() {
    const element = document.getElementById('card'); // Replace 'card' with the ID of your card element

    html2pdf()
      .from(element)
      .save('card.pdf');
  }


  registerMoodle() {

    const autoGeneratedId =this.commonService.generateRandomId();

    const formData = new FormData();
    const password = this.commonService.generatePassword(10);
    const userName = this.member.fullName.split(' ')[0].toLowerCase()+'_' + this.commonService.generatePassword(5).toLowerCase()

    formData.append('moodlewsrestformat', 'json');
    formData.append('wsfunction', 'core_user_create_users');
    formData.append('wstoken', 'a0c0c7896b48813246e45971eaa74c21');
    formData.append('users[0][username]', userName);
    formData.append('users[0][password]', password);
    formData.append('users[0][firstname]', this.member.fullName.split(' ')[0]);
    formData.append('users[0][lastname]', this.member.fullName.split(' ')[1]);
    formData.append('users[0][email]', this.member.email);
    formData.append('users[0][idnumber]', autoGeneratedId);
    formData.append('users[0][lang]', 'en');
    formData.append('users[0][description]', 'If you die you die');

    this.memberService.callMoodle(formData).subscribe({
      next: (res) => {
        this.messageService.add({ severity: 'success', summary: 'Successfull', detail: 'Your moodle Registration was successfull' });

        if (res[0]) {
          var moodleDto: MoodleUpdateDto = {
            moodleName: res[0].username,
            moodleId: res[0].id.toString(),
            memberId: this.member.id,
            moodlePassword : password 
          }
          this.updateMember(moodleDto)
    

        }
        else {
          this.messageService.add({ severity: 'error', summary: res.debuginfo, detail: res.message });
        }



      }
    })
  }

  updateMember(updateMoodleDto: MoodleUpdateDto) {
    this.memberService.updateMoodleApi(updateMoodleDto).subscribe({
      next: (res) => {
        if (res.success) {
          this.messageService.add({ severity: 'success', summary: 'Successfull', detail: 'Your moodle updated was successfull' });
          window.location.reload()

        } else {
          this.messageService.add({ severity: 'error', summary: 'Something went Wrong!!!', detail: res.message });
        }
      }, error: (err) => {
        this.messageService.add({ severity: 'error', summary: 'Something went wrong!!', detail: err });
      }
    })
  }

  changeStatus() {

    this.viewPassword = !this.viewPassword
  }



    
  
}
